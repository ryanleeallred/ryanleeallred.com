{"version":3,"file":"component---src-templates-blog-post-js.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <h1 class=\"main-heading\">\n        <Link className=\"header-link-home\" to=\"/\">\n          {title}\n        </Link>\n      </h1>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <div className=\"header-border\"></div>\n      <div className=\"content-wrapper\">\n        <main>{children}</main>\n      </div>\n      {/* <footer>\n        <div className='copyright'>\n          RyanAllred.ai © {new Date().getFullYear()}\n        </div>\n      </footer> */}\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["React","Link","Layout","location","title","children","rootPath","__PATH_PREFIX__","isRootPath","pathname","header","createElement","className","to","class","PropTypes","Helmet","useStaticQuery","Seo","description","lang","meta","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","site","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","propTypes","string","arrayOf","object","isRequired","BlogPostTemplate","data","_data$site$siteMetada","post","markdownRemark","siteTitle","previous","next","frontmatter","excerpt","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel","pageQuery"],"sourceRoot":""}