{"version":3,"file":"component---src-templates-blog-post-js.js","mappings":";;;;;;;;;;;;;;;;;;AAA8B;AACD;AAE7B,MAAME,MAAM,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EAChD,MAAMC,QAAQ,GAAI,GAAEC,EAAgB,GAAE;EACtC,MAAMC,UAAU,GAAGL,QAAQ,CAACM,QAAQ,KAAKH,QAAQ;EACjD,IAAII,MAAM;EAEV,IAAIF,UAAU,EAAE;IACdE,MAAM,gBACJV,gDAAA;MAAIY,SAAS,EAAC;IAAc,gBAC1BZ,gDAAA,CAACC,wCAAI;MAACY,EAAE,EAAC;IAAG,GAAET,KAAY,CACxB,CACL;EACH,CAAC,MAAM;IACLM,MAAM,gBACJV,gDAAA;MAAIc,KAAK,EAAC;IAAc,gBACtBd,gDAAA,CAACC,wCAAI;MAACW,SAAS,EAAC,kBAAkB;MAACC,EAAE,EAAC;IAAG,GACtCT,KACG,CACJ,CACL;EACH;EAEA,oBACEJ,gDAAA;IAAKY,SAAS,EAAC,gBAAgB;IAAC,qBAAmBJ;EAAW,gBAC5DR,gDAAA;IAAQY,SAAS,EAAC;EAAe,GAAEF,MAAe,CAAC,eACnDV,gDAAA;IAAKY,SAAS,EAAC;EAAe,CAAM,CAAC,eACrCZ,gDAAA;IAAKY,SAAS,EAAC;EAAiB,gBAC9BZ,gDAAA,eAAOK,QAAe,CACnB,CAMF,CAAC;AAEV,CAAC;AAED,iEAAeH,MAAM;;;;;;;;;;;;;;;;;;;;;ACxCrB;AACA;AACA;AACA;AACA;AACA;;AAE8B;AACI;AACG;AAGrC,MAAMe,GAAG,GAAGA,CAAC;EAAEC,WAAW;EAAEC,IAAI;EAAEC,IAAI;EAAEhB;AAAM,CAAC,KAAK;EAAA,IAAAiB,kBAAA,EAAAC,mBAAA,EAAAC,qBAAA;EAClD,MAAM;IAAEC;EAAK,CAAC,GAAAC,wEAcb;EAED,MAAME,eAAe,GAAGT,WAAW,IAAIM,IAAI,CAACI,YAAY,CAACV,WAAW;EACpE,MAAMW,YAAY,IAAAR,kBAAA,GAAGG,IAAI,CAACI,YAAY,cAAAP,kBAAA,uBAAjBA,kBAAA,CAAmBjB,KAAK;EAE7C,oBACEJ,gDAAA,CAACgB,gDAAM;IACLc,cAAc,EAAE;MACdX;IACF,CAAE;IACFf,KAAK,EAAEA,KAAM;IACb2B,aAAa,EAAEF,YAAY,GAAI,QAAOA,YAAa,EAAC,GAAG,IAAK;IAC5DT,IAAI,EAAE,CACJ;MACEY,IAAI,EAAG,aAAY;MACnBC,OAAO,EAAEN;IACX,CAAC,EACD;MACEO,QAAQ,EAAG,UAAS;MACpBD,OAAO,EAAE7B;IACX,CAAC,EACD;MACE8B,QAAQ,EAAG,gBAAe;MAC1BD,OAAO,EAAEN;IACX,CAAC,EACD;MACEO,QAAQ,EAAG,SAAQ;MACnBD,OAAO,EAAG;IACZ,CAAC,EACD;MACED,IAAI,EAAG,cAAa;MACpBC,OAAO,EAAG;IACZ,CAAC,EACD;MACED,IAAI,EAAG,iBAAgB;MACvBC,OAAO,EAAE,EAAAX,mBAAA,GAAAE,IAAI,CAACI,YAAY,cAAAN,mBAAA,wBAAAC,qBAAA,GAAjBD,mBAAA,CAAmBa,MAAM,cAAAZ,qBAAA,uBAAzBA,qBAAA,CAA2Ba,OAAO,KAAK;IAClD,CAAC,EACD;MACEJ,IAAI,EAAG,eAAc;MACrBC,OAAO,EAAE7B;IACX,CAAC,EACD;MACE4B,IAAI,EAAG,qBAAoB;MAC3BC,OAAO,EAAEN;IACX,CAAC,CACF,CAACU,MAAM,CAACjB,IAAI;EAAE,CAChB,CAAC;AAEN,CAAC;AAEDH,GAAG,CAACqB,YAAY,GAAG;EACjBnB,IAAI,EAAG,IAAG;EACVC,IAAI,EAAE,EAAE;EACRF,WAAW,EAAG;AAChB,CAAC;AAEDD,GAAG,CAACsB,SAAS,GAAG;EACdrB,WAAW,EAAEH,0DAAgB;EAC7BI,IAAI,EAAEJ,0DAAgB;EACtBK,IAAI,EAAEL,yDAAiB,CAACA,0DAAgB,CAAC;EACzCX,KAAK,EAAEW,qEAA2B4B;AACpC,CAAC;AAED,iEAAe1B,GAAG;;;;;;;;;;;;;;;;;;;AC1FY;AACQ;AAEG;AACN;AAEnC,MAAM2B,gBAAgB,GAAGA,CAAC;EAAElB,IAAI;EAAEvB;AAAS,CAAC,KAAK;EAAA,IAAA0C,qBAAA;EAC/C,MAAMC,IAAI,GAAGpB,IAAI,CAACqB,cAAc;EAChC,MAAMC,SAAS,GAAG,EAAAH,qBAAA,GAAAnB,IAAI,CAACF,IAAI,CAACI,YAAY,cAAAiB,qBAAA,uBAAtBA,qBAAA,CAAwBzC,KAAK,KAAK,OAAM;EAC1D,MAAM;IAAE6C,QAAQ;IAAEC;EAAK,CAAC,GAAGxB,IAAI;EAE/B,oBACE1B,gDAAA,CAACE,0DAAM;IAACC,QAAQ,EAAEA,QAAS;IAACC,KAAK,EAAE4C;EAAU,gBAC3ChD,gDAAA,CAACiB,uDAAG;IACFb,KAAK,EAAE0C,IAAI,CAACK,WAAW,CAAC/C,KAAM;IAC9Bc,WAAW,EAAE4B,IAAI,CAACK,WAAW,CAACjC,WAAW,IAAI4B,IAAI,CAACM;EAAQ,CAC3D,CAAC,eACFpD,gDAAA;IACEY,SAAS,EAAC,WAAW;IACrByC,SAAS;IACTC,QAAQ,EAAC;EAA2B,gBAEpCtD,gDAAA,8BACEA,gDAAA;IAAIuD,QAAQ,EAAC;EAAU,GAAET,IAAI,CAACK,WAAW,CAAC/C,KAAU,CAAC,eACrDJ,gDAAA,YAAI8C,IAAI,CAACK,WAAW,CAACK,IAAQ,CACvB,CAAC,eACTxD,gDAAA;IACEyD,uBAAuB,EAAE;MAAEC,MAAM,EAAEZ,IAAI,CAACa;IAAK,CAAE;IAC/CJ,QAAQ,EAAC;EAAa,CACvB,CAAC,eACFvD,gDAAA,WAAK,CACE,CAAC,eACVA,gDAAA;IAAKY,SAAS,EAAC;EAAe,gBAC5BZ,gDAAA;IACE4D,KAAK,EAAE;MACLC,OAAO,EAAG,MAAK;MACfC,QAAQ,EAAG,MAAK;MAChBC,cAAc,EAAG,eAAc;MAC/BC,SAAS,EAAG,MAAK;MACjBC,OAAO,EAAE;IACX;EAAE,gBAEFjE,gDAAA,aACGiD,QAAQ,iBACPjD,gDAAA,CAACC,wCAAI;IAACY,EAAE,EAAEoC,QAAQ,CAACiB,MAAM,CAACC,IAAK;IAACC,GAAG,EAAC;EAAM,GAAC,SACvC,EAACnB,QAAQ,CAACE,WAAW,CAAC/C,KACpB,CAEN,CAAC,eACLJ,gDAAA,aACGkD,IAAI,iBACHlD,gDAAA,CAACC,wCAAI;IAACY,EAAE,EAAEqC,IAAI,CAACgB,MAAM,CAACC,IAAK;IAACC,GAAG,EAAC;EAAM,GACnClB,IAAI,CAACC,WAAW,CAAC/C,KAAK,EAAC,SACpB,CAEN,CACF,CACD,CACC,CAAC;AAEb,CAAC;AAED,iEAAewC,gBAAgB;AAExB,MAAMyB,SAAS,eAsCrB","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <h1 class=\"main-heading\">\n        <Link className=\"header-link-home\" to=\"/\">\n          {title}\n        </Link>\n      </h1>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <div className=\"header-border\"></div>\n      <div className=\"content-wrapper\">\n        <main>{children}</main>\n      </div>\n      {/* <footer>\n        <div className='copyright'>\n          RyanAllred.ai © {new Date().getFullYear()}\n        </div>\n      </footer> */}\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["React","Link","Layout","location","title","children","rootPath","__PATH_PREFIX__","isRootPath","pathname","header","createElement","className","to","class","PropTypes","Helmet","Seo","description","lang","meta","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","site","staticQueryData","data","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","propTypes","string","arrayOf","object","isRequired","BlogPostTemplate","_data$site$siteMetada","post","markdownRemark","siteTitle","previous","next","frontmatter","excerpt","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel","pageQuery"],"sourceRoot":""}