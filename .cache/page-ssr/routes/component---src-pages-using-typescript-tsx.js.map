{"version":3,"file":"component---src-pages-using-typescript-tsx.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/pages/using-typescript.tsx","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <Seo title=\"Using TypeScript\" />\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <em>.ts/.tsx</em> files for your\n      pages, components etc. Please note that the <em>gatsby-*.js</em> files\n      (like gatsby-node.js) currently don't support TypeScript yet.\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <h1 class=\"main-heading\">\n        <Link className=\"header-link-home\" to=\"/\">\n          {title}\n        </Link>\n      </h1>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <div className=\"header-border\"></div>\n      <div className=\"content-wrapper\">\n        <main>{children}</main>\n      </div>\n      {/* <footer>\n        <div className='copyright'>\n          RyanAllred.ai Â© {new Date().getFullYear()}\n        </div>\n      </footer> */}\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n"],"names":["React","Link","Layout","Seo","UsingTypescript","data","path","location","title","site","buildTime","href","to","query","children","rootPath","__PATH_PREFIX__","isRootPath","pathname","header","createElement","className","class","PropTypes","Helmet","useStaticQuery","description","lang","meta","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","propTypes","string","arrayOf","object","isRequired"],"sourceRoot":""}